using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;

namespace OOs.Common.CommandLine.Generators;

public static class ArgumentParserCodeEmitter
{
    internal static string Emit(string namespaceName, string className, ImmutableArray<ArgumentData> attributes)
    {
        var sb = new StringBuilder();
        sb.Append($$"""
//-------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// 
""");
        sb.Append(ProductInfo.Product);
        sb.Append("""
 
// v
""");
        sb.Append(ProductInfo.Version);
        sb.Append(" (");
        sb.Append(ProductInfo.Copyright);
        sb.Append($$"""
)
// Changes to this file may cause incorrect behavior and will be lost
// if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------

#pragma warning disable CS1591
#nullable enable

namespace {{namespaceName}};

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{ProductInfo.Product}}", "{{ProductInfo.Version}}")]
public static class {{className}}
{
    public static global::System.Collections.Generic.IReadOnlyDictionary<string, string?> Parse(string[] args)
    {
        var bag = new global::System.Collections.Generic.Dictionary<string, string?>();
        var enumerator = args.AsSpan().GetEnumerator();
        while (enumerator.MoveNext())
        {
        EnterLoop:
            var span = enumerator.Current.AsSpan();
            string name;
            if (span.StartsWith("--"))
            {
                span = span.Slice(2);

""");
        var i = 0;
        foreach (var attr in attributes)
        {
            if (attr is { Name: { Length: var len } name, Type: { } type })
            {
                sb.Append($$"""
                {{(i++ is 0 ? "if" : "else if")}} ((span.Length == {{len}} || span.Length > {{len}} && span[{{len}}] == '=') && span.Slice(0, {{len}}).SequenceEqual("{{name}}"))
                {

""");
                if (type is SpecialType.System_Boolean)
                {
                    sb.Append($$"""
                    bag["{{name}}"] = "True";
                    continue;

""");
                }
                else if (type is SpecialType.System_String or SpecialType.System_Int32)
                {
                    sb.Append($$"""
                    name = "{{name}}";
                    span = span.Slice({{len}});

""");
                }

                sb.Append("""
                }

""");
            }
        }

        sb.Append("""
                else
                {
                    continue;
                }

                if (span.StartsWith("="))
                {
                    bag[name] = new string(span.Slice(1));
                }
                else if (enumerator.MoveNext())
                {
                    var value = enumerator.Current;
                    if (!value.StartsWith('-'))
                    {
                        bag[name] = value;
                    }
                    else
                    {
                        bag[name] = null;
                        goto EnterLoop;
                    }
                }
            }
            else if (span.StartsWith("-"))
            {
                for(var i = 1; i < span.Length; i++)
                {
                    switch (span[i]) 
                    {

""");
        foreach (var attr in attributes)
        {
            if (attr is { Name: { } name, ShortName: { } sname, Type: { } type })
            {
                sb.Append($$"""
                        case '{{sname}}':

""");
                if (type is SpecialType.System_Boolean)
                {
                    sb.Append($$"""
                            bag["{{name}}"] = "True";
                            continue;

""");
                }
                else
                {
                    sb.Append($$"""
                            name = "{{name}}";
                            break;

""");
                }
            }
        }

        sb.Append($$"""
                        default: continue;
                    }

                    if (i < span.Length - 1)
                    {
                        bag[name] = new string(span.Slice(i + 1));
                        break;
                    }
                    else if (enumerator.MoveNext())
                    {
                        var value = enumerator.Current;
                        if (!value.StartsWith('-'))
                        {
                            bag[name] = value;
                            break;
                        }
                        else
                        {
                            bag[name] = null;
                            goto EnterLoop;
                        }
                    }
                }
            }
        }

        return bag;
    }
}
""");

        return sb.ToString();
    }
}