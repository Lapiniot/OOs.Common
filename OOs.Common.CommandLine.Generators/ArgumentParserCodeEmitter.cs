using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;

namespace OOs.Common.CommandLine.Generators;

public static class ArgumentParserCodeEmitter
{
    internal static string Emit(string namespaceName, string className, ImmutableArray<ArgumentData> attributes)
    {
        var sb = new StringBuilder();
        sb.Append($$"""
//-------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool 
""");
        sb.Append(ProductInfo.Product);
        sb.Append("""

// v
""");
        sb.Append(ProductInfo.Version);
        sb.Append(" (");
        sb.Append(ProductInfo.Copyright);
        sb.Append($$"""
)
// Changes to this file may cause incorrect behavior and will be lost
// if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------

#pragma warning disable CS1591
#nullable enable

namespace {{namespaceName}};

[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{ProductInfo.Product}}", "{{ProductInfo.Version}}")]
public readonly struct {{className}}: global::OOs.CommandLine.IArgumentsParser
{
    public static (global::System.Collections.Generic.IReadOnlyDictionary<string, string?> Options, global::System.Collections.Immutable.ImmutableArray<string> Arguments) Parse(string[] args)
    {
        global::System.ArgumentNullException.ThrowIfNull(args);

        var options = new global::System.Collections.Generic.Dictionary<string, string?>();
        var builder = global::System.Collections.Immutable.ImmutableArray.CreateBuilder<string>(args.Length);

        var enumerator = args.AsSpan().GetEnumerator();
        while (enumerator.MoveNext())
        {
            var span = enumerator.Current.AsSpan();
            string name;
            if (span.StartsWith("--"))
            {
                span = span.Slice(2);

                if (span.IsEmpty)
                {
                    // Special "--" (end of option arguments) marker detected - 
                    // read the rest of args as regular positional arguments
                    while (enumerator.MoveNext())
                    {
                        builder.Add(enumerator.Current);
                    }

                    break;
                }


""");
        var i = 0;
        foreach (var attr in attributes)
        {
            if (attr is { Name: { } name, Alias: { Length: var len } alias, Type: { } type })
            {
                sb.Append($$"""
                {{(i++ is 0 ? "if" : "else if")}} ((span.Length == {{len}} || span.Length > {{len}} && span[{{len}}] == '=') && span.Slice(0, {{len}}).SequenceEqual("{{alias}}"))
                {

""");
                if (type is SpecialType.System_Boolean)
                {
                    sb.Append($$"""
                    options["{{name}}"] = "True";
                    continue;

""");
                }
                else if (type is SpecialType.System_String or SpecialType.System_Int32)
                {
                    sb.Append($$"""
                    name = "{{name}}";
                    span = span.Slice({{len}});

""");
                }

                sb.Append("""
                }

""");
            }
        }

        sb.Append("""
                else
                {
                    builder.Add(enumerator.Current);
                    continue;
                }

                if (span.StartsWith("="))
                {
                    options[name] = new string(span.Slice(1));
                }
                else
                {
                    goto TryReadNext;
                }
            }
            else if (span.StartsWith("-"))
            {
                for(var i = 1; i < span.Length; i++)
                {
                    switch (span[i]) 
                    {

""");
        foreach (var attr in attributes)
        {
            if (attr is { Name: { } name, ShortAlias: not '\0' and var alias, Type: { } type })
            {
                sb.Append($$"""
                        case '{{alias}}':

""");
                if (type is SpecialType.System_Boolean)
                {
                    sb.Append($$"""
                            options["{{name}}"] = "True";
                            continue;

""");
                }
                else
                {
                    sb.Append($$"""
                            name = "{{name}}";
                            break;

""");
                }
            }
        }

        sb.Append($$"""
                        default: continue;
                    }

                    if (i < span.Length - 1)
                    {
                        options[name] = new string(span.Slice(i + 1));
                        break;
                    }
                    else
                    {
                        goto TryReadNext;
                    }
                }
            }
            else
            {
                builder.Add(enumerator.Current);
            }

            continue;

            TryReadNext:
            if (enumerator.MoveNext())
            {
                var value = enumerator.Current;
                if (!value.StartsWith('-'))
                {
                    options[name] = value;
                    continue;
                }
            }

            ThrowMissingOptionValue(name);
        }

        return (options, builder.ToImmutable());
    }

    [global::System.Diagnostics.CodeAnalysis.DoesNotReturn]
    static void ThrowMissingOptionValue(string optionName)
    {
        throw new InvalidOperationException($"Missing value for '{optionName}' option.");
    }
}
""");

        return sb.ToString();
    }
}